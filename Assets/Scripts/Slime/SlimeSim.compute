#pragma kernel Update

struct Agent {
	float2 position;
	float angle;
	int4 speciesMask;
	int speciesIndex;
	float health;
	float3 neuralWeights; // 3 sensor inputs -> 1 steering output
};

struct SpeciesSettings {
	float moveSpeed;
	float turnSpeed;

	float sensorAngleDegrees;
	float sensorOffsetDst;
	int sensorSize;
	float4 colour;
};

StructuredBuffer<SpeciesSettings> speciesSettings;
uint numSpecies;

RWStructuredBuffer<Agent> agents;
uint numAgents;

RWTexture2D<float4> TrailMap;
int width;
int height;

float trailWeight;
float starvationRate;

float deltaTime;
float time;

// Hash function www.cs.ubc.ca/~rbridson/docs/schechter-sca08-turbulence.pdf
uint hash(uint state)
{
    state ^= 2747636419u;
    state *= 2654435769u;
    state ^= state >> 16;
    state *= 2654435769u;
    state ^= state >> 16;
    state *= 2654435769u;
    return state;
}

float scaleToRange01(uint state)
{
    return state / 4294967295.0;
}

float sense(Agent agent, SpeciesSettings settings, float sensorAngleOffset) {
	float sensorAngle = agent.angle + sensorAngleOffset;
	float2 sensorDir = float2(cos(sensorAngle), sin(sensorAngle));

	float2 sensorPos = agent.position + sensorDir * settings.sensorOffsetDst;
	int sensorCentreX = (int) sensorPos.x;
	int sensorCentreY = (int) sensorPos.y;

	float sum = 0;

	int4 senseWeight = agent.speciesMask * 2 - 1;

	for (int offsetX = -settings.sensorSize; offsetX <= settings.sensorSize; offsetX ++) {
		for (int offsetY = -settings.sensorSize; offsetY <= settings.sensorSize; offsetY ++) {
			int sampleX = min(width - 1, max(0, sensorCentreX + offsetX));
			int sampleY = min(height - 1, max(0, sensorCentreY + offsetY));
			sum += dot(senseWeight, TrailMap[int2(sampleX, sampleY)]);
		}
	}

	return sum;
}

// Simple neural network: 3 sensor inputs -> 1 steering output
float neural_network(Agent agent, float3 sensorInputs) {
	// Normalize inputs to reasonable range
	float3 inputs = saturate(sensorInputs * 0.1); // Scale down for better training
	
	// Simple dot product: weighted sum of inputs
	float output = dot(inputs, agent.neuralWeights);
	
	// Apply activation function (tanh to keep output in -1 to 1 range)
	return tanh(output);
}

void respawn_agent(uint id) {
	// Reset basic properties
	agents[id].health = 1;
	
	// Spawn in a small circle around center for visibility
	float spawnRadius = min(width, height) * 0.1;
	float spawnAngle = scaleToRange01(hash(id + time * 100000)) * 2 * 3.14159;
	agents[id].position = float2(width/2, height/2) + float2(cos(spawnAngle), sin(spawnAngle)) * spawnRadius;
	agents[id].angle = scaleToRange01(hash(agents[id].position.y * width + agents[id].position.x + hash(id + time * 100000))) * 2 * 3.14159;
	
	// Initialize neural network weights by averaging from healthy agents
	float3 newWeights = float3(0, 0, 0);
	
	int healthyCount = 0;
	int maxSamples = min(50, (int)numAgents); // Reduced sample size
	
	// Sample healthy agents for genetic algorithm
	for (int i = 0; i < maxSamples; i++) {
		uint sampleIndex = (id + i) % numAgents;
		if (agents[sampleIndex].health > 0.5) {
			newWeights += agents[sampleIndex].neuralWeights;
			healthyCount++;
		}
	}
	
	// If we found healthy agents, average their weights with mutation
	if (healthyCount > 0) {
		float3 avgWeights = newWeights / healthyCount;
		
		// Add random mutation to each weight
		uint randSeed = hash(id + time * 1000);
		float mutationStrength = 0.1; // Reduced mutation for more stable evolution
		
		float3 mutation;
		randSeed = hash(randSeed);
		mutation.x = (scaleToRange01(randSeed) - 0.5) * 2.0 * mutationStrength;
		randSeed = hash(randSeed);
		mutation.y = (scaleToRange01(randSeed) - 0.5) * 2.0 * mutationStrength;
		randSeed = hash(randSeed);
		mutation.z = (scaleToRange01(randSeed) - 0.5) * 2.0 * mutationStrength;
		
		agents[id].neuralWeights = avgWeights + mutation;
	} else {
		// Fallback to random weights if no healthy agents found
		uint randSeed = hash(id + time * 1000);
		
		float3 randomWeights;
		randSeed = hash(randSeed);
		randomWeights.x = (scaleToRange01(randSeed) - 0.5) * 1.0; // Smaller initial range
		randSeed = hash(randSeed);
		randomWeights.y = (scaleToRange01(randSeed) - 0.5) * 1.0;
		randSeed = hash(randSeed);
		randomWeights.z = (scaleToRange01(randSeed) - 0.5) * 1.0;
		
		agents[id].neuralWeights = randomWeights;
	}
}

[numthreads(16,1,1)]
void Update (uint3 id : SV_DispatchThreadID)
{
	if (id.x >= numAgents) {
		return;
	}

	Agent agent = agents[id.x];
	SpeciesSettings settings = speciesSettings[agent.speciesIndex];
	float2 pos = agent.position;

	float food = TrailMap[int2(pos)];
	agent.health -= (1.0 - food * 1.0001) * starvationRate;
	
	// Write health back to buffer immediately so respawn check works
	agents[id.x].health = agent.health;
	
	if (agent.health <= 0) {
		respawn_agent(id.x);
		// Reload the agent data after respawn
		agent = agents[id.x];
		pos = agent.position;
	}

	// Neural network-based steering
	float sensorAngleRad = settings.sensorAngleDegrees * (3.1415 / 180);
	float turnSpeed = settings.turnSpeed * 2 * 3.1415;
	
	// Get sensor inputs
	float weightForward = sense(agent, settings, 0);
	float weightLeft = sense(agent, settings, sensorAngleRad);
	float weightRight = sense(agent, settings, -sensorAngleRad);
	
	// Pack sensor data for neural network (forward, left, right)
	float3 sensorInputs = float3(weightForward, weightLeft, weightRight);
	
	// Get steering output from neural network
	float steeringOutput = neural_network(agent, sensorInputs);
	
	// Apply steering directly (output is in range -1 to 1)
	// Positive = turn right, Negative = turn left
	float steeringAngle = steeringOutput * turnSpeed * deltaTime;
	agents[id.x].angle += steeringAngle;

	// Update position
	float2 direction = float2(cos(agent.angle), sin(agent.angle));
	float2 newPos = agent.position + direction * deltaTime * settings.moveSpeed;

	
	// Clamp position to map boundaries, and pick new random move dir if hit boundary
	if (newPos.x < 0 || newPos.x >= width || newPos.y < 0 || newPos.y >= height) {
		uint random = hash(pos.y * width + pos.x + hash(id.x + time * 100000));
		float randomAngle = scaleToRange01(random) * 2 * 3.1415;

		newPos.x = min(width-1,max(0, newPos.x));
		newPos.y = min(height-1,max(0, newPos.y));
		agents[id.x].angle = randomAngle;
	}
	else {
		int2 coord = int2(newPos);
		float4 oldTrail = TrailMap[coord];
		TrailMap[coord] = min(1, oldTrail + agent.speciesMask * trailWeight * deltaTime);
	}
	
	agents[id.x].position = newPos;
}

#pragma kernel Diffuse

RWTexture2D<float4> DiffusedTrailMap;

float decayRate;
float diffuseRate;

[numthreads(8,8,1)]
void Diffuse (uint3 id : SV_DispatchThreadID)
{
	if (id.x < 0 || id.x >= (uint)width || id.y < 0 || id.y >= (uint)height) {
		return;
	}

	float4 sum = 0;
	float4 originalCol = TrailMap[id.xy];
	
	// 2D diffusion (3x3 kernel instead of 3x3x3)
	for (int offsetX = -1; offsetX <= 1; offsetX ++) {
		for (int offsetY = -1; offsetY <= 1; offsetY ++) {
			int sampleX = min(width-1, max(0, (int)id.x + offsetX));
			int sampleY = min(height-1, max(0, (int)id.y + offsetY));
			sum += TrailMap[int2(sampleX, sampleY)];
		}
	}

	float4 blurredCol = sum / 9;
	float diffuseWeight = saturate(diffuseRate * deltaTime);
	blurredCol = originalCol * (1 - diffuseWeight) + blurredCol * diffuseWeight;
	
	DiffusedTrailMap[id.xy] = max(0, blurredCol - decayRate * deltaTime);
}

#pragma kernel UpdateColourMap
RWTexture2D<float4> ColourMap;
[numthreads(8,8,1)]
void UpdateColourMap (uint3 id : SV_DispatchThreadID)
{
	if (id.x < 0 || id.x >= (uint)width || id.y < 0 || id.y >= (uint)height) {
		return;
	}

	float4 map = TrailMap[id.xy];

	float4 colour = 0;
	for (uint i = 0; i < numSpecies; i++) {
		float4 mask = float4(i==0, i==1, i==2, i==3);
		colour += speciesSettings[i].colour * dot(map, mask); 
	}
	ColourMap[id.xy] = colour;
}